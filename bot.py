import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN
from ai_helper import get_random_dish, generate_weekly_menu, format_weekly_menu, generate_daily_menu, format_daily_menu

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [
            InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ", callback_data="random_dish"),
            InlineKeyboardButton("üçΩÔ∏è –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å", callback_data="daily_menu")
        ],
        [
            InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="weekly_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """
üçΩÔ∏è *–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –º–µ–Ω—é –¥–ª—è –¢–∞–Ω–∏!*

–Ø –ø–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –≤–µ—á–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?"

–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:
‚Ä¢ üé≤ *–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ* - –ø—Ä–µ–¥–ª–æ–∂—É –±–ª—é–¥–æ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞, –æ–±–µ–¥–∞ –∏–ª–∏ —É–∂–∏–Ω–∞
‚Ä¢ üçΩÔ∏è *–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å* - —Å–æ—Å—Ç–∞–≤–ª—é –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏ —É–∂–∏–Ω –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
‚Ä¢ üìÖ *–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é* - —Å–æ—Å—Ç–∞–≤–ª—é –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
    """
    
    await update.message.reply_text(
        welcome_text, 
        reply_markup=reply_markup, 
        parse_mode='Markdown'
    )

async def random_dish_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª—é–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="dish_–∑–∞–≤—Ç—Ä–∞–∫")],
        [InlineKeyboardButton("‚òÄÔ∏è –û–±–µ–¥", callback_data="dish_–æ–±–µ–¥")],
        [InlineKeyboardButton("üåô –£–∂–∏–Ω", callback_data="dish_—É–∂–∏–Ω")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üé≤ *–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def get_dish_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–ª—é–¥–∞ –æ—Ç –ò–ò"""
    query = update.callback_query
    await query.answer()
    
    meal_type = query.data.replace("dish_", "")
    print(f"[BOT DEBUG] –ó–∞–ø—Ä–æ—Å –±–ª—é–¥–∞ –¥–ª—è: {meal_type}")
    print(f"[BOT DEBUG] Callback data: {query.data}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await query.edit_message_text("ü§î –î—É–º–∞—é –Ω–∞–¥ –±–ª—é–¥–æ–º...")
    
    try:
        print(f"[BOT DEBUG] –í—ã–∑—ã–≤–∞–µ–º get_random_dish({meal_type})")
        dish = get_random_dish(meal_type)
        print(f"[BOT DEBUG] –ü–æ–ª—É—á–∏–ª–∏ –±–ª—é–¥–æ: '{dish}'")
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ –±–ª—é–¥–æ", callback_data=f"dish_{meal_type}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="random_dish")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        emoji_map = {"–∑–∞–≤—Ç—Ä–∞–∫": "üåÖ", "–æ–±–µ–¥": "‚òÄÔ∏è", "—É–∂–∏–Ω": "üåô"}
        
        await query.edit_message_text(
            f"{emoji_map[meal_type]} *{meal_type.capitalize()}:*\n\nüçΩÔ∏è *{dish}*\n\n–ù—Ä–∞–≤–∏—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        print(f"[BOT DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
    except Exception as e:
        print(f"[BOT ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª—é–¥–∞: {type(e).__name__}: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª—é–¥–∞: {e}")
        await query.edit_message_text(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="random_dish")]])
        )

async def generate_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("üçΩÔ∏è –°–æ—Å—Ç–∞–≤–ª—è—é –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è±Ô∏è")
    
    try:
        menu = generate_weekly_menu()
        menu_text = format_weekly_menu(menu)
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ –º–µ–Ω—é", callback_data="weekly_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            menu_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é: {e}")
        await query.edit_message_text(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def generate_daily_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("üçΩÔ∏è –°–æ—Å—Ç–∞–≤–ª—è—é –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å... ‚è±Ô∏è")
    
    try:
        menu = generate_daily_menu()
        menu_text = format_daily_menu(menu)
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å", callback_data="daily_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            menu_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å: {e}")
        await query.edit_message_text(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ", callback_data="random_dish"),
            InlineKeyboardButton("üçΩÔ∏è –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å", callback_data="daily_menu")
        ],
        [
            InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="weekly_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üçΩÔ∏è *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    print(f"[BOT DEBUG] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    print(f"[BOT DEBUG] –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query.from_user.id}")
    
    if query.data == "random_dish":
        print("[BOT DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –∫ –º–µ–Ω—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª—é–¥–∞")
        await random_dish_menu(update, context)
    elif query.data == "daily_menu":
        print("[BOT DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å")
        await generate_daily_menu_handler(update, context)
    elif query.data == "weekly_menu":
        print("[BOT DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")
        await generate_menu(update, context)
    elif query.data.startswith("dish_"):
        print(f"[BOT DEBUG] –ó–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞: {query.data}")
        await get_dish_suggestion(update, context)
    elif query.data == "back_to_main":
        print("[BOT DEBUG] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await back_to_main(update, context)
    else:
        print(f"[BOT WARNING] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"[BOT DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{update.message.text}'")
    print(f"[BOT DEBUG] –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.message.from_user.id}")
    
    keyboard = [
        [
            InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ", callback_data="random_dish"),
            InlineKeyboardButton("üçΩÔ∏è –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å", callback_data="daily_menu")
        ],
        [
            InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="weekly_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞:",
        reply_markup=reply_markup
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é
    import asyncio
    async def set_commands():
        from telegram import BotCommand
        commands = [
            BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ]
        await application.bot.set_my_commands(commands)
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(set_commands())
    
    application.run_polling()

if __name__ == "__main__":
    main()