from config import OPENAI_API_KEY, DEEPSEEK_API_KEY, AI_PROVIDER
from memory_manager import dish_memory
from prompt_variations import prompt_generator
from ai_clients import MultiAIClient

import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ AI –∫–ª–∏–µ–Ω—Ç–∞
try:
    client = MultiAIClient(
        openai_key=OPENAI_API_KEY,
        deepseek_key=DEEPSEEK_API_KEY,
        provider=AI_PROVIDER
    )
    logger.info(f"ü§ñ AI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {client.get_active_provider()}")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π OpenAI –∫–ª–∏–µ–Ω—Ç
    from ai_clients import OpenAIClient
    client = OpenAIClient(OPENAI_API_KEY)
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback OpenAI –∫–ª–∏–µ–Ω—Ç")

def get_random_dish(meal_type):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞, –æ–±–µ–¥–∞ –∏–ª–∏ —É–∂–∏–Ω–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è
    avoid_text = dish_memory.get_avoid_list_text(meal_type)
    logger.info(f"[AI DEBUG] –ò–∑–±–µ–≥–∞–µ–º –¥–ª—è {meal_type}: {avoid_text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENAI_API_KEY') or OPENAI_API_KEY
    if not api_key or api_key == 'your_openai_key_here':
        logger.error("[AI ERROR] OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏"
    
    logger.info(f"[AI DEBUG] API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∏–∑–±–µ–≥–∞–µ–º—ã—Ö –±–ª—é–¥
    prompt = prompt_generator.get_random_prompt(meal_type, avoid_text)
    logger.info(f"[AI DEBUG] –ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
    
    try:
        logger.info("[AI DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI...")
        dish_name = client.get_completion(
            prompt=prompt,
            max_tokens=50,
            temperature=0.9
        )
        
        logger.info(f"[AI DEBUG] –û—Ç–≤–µ—Ç AI: '{dish_name}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not dish_name:
            logger.warning("[AI DEBUG] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI!")
            return "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª—é–¥–æ –≤ –ø–∞–º—è—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
        dish_memory.add_dish(meal_type, dish_name)
        logger.info(f"[AI DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å: {dish_name}")
        
        return dish_name
        
    except Exception as e:
        logger.error(f"[AI ERROR] –û—à–∏–±–∫–∞ AI: {type(e).__name__}: {e}")
        logger.error(f"[AI ERROR] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏"  # fallback –≤–∞—Ä–∏–∞–Ω—Ç

def generate_weekly_menu():
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    menu = {}
    
    for day in days:
        menu[day] = {
            "–∑–∞–≤—Ç—Ä–∞–∫": get_random_dish("–∑–∞–≤—Ç—Ä–∞–∫"),
            "–æ–±–µ–¥": get_random_dish("–æ–±–µ–¥"), 
            "—É–∂–∏–Ω": get_random_dish("—É–∂–∏–Ω")
        }
    
    return menu

def format_weekly_menu(menu):
    """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
    text = "üçΩÔ∏è *–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n"
    
    for day, meals in menu.items():
        text += f"*{day}:*\n"
        text += f"üåÖ –ó–∞–≤—Ç—Ä–∞–∫: {meals['–∑–∞–≤—Ç—Ä–∞–∫']}\n"
        text += f"‚òÄÔ∏è –û–±–µ–¥: {meals['–æ–±–µ–¥']}\n"
        text += f"üåô –£–∂–∏–Ω: {meals['—É–∂–∏–Ω']}\n\n"
    
    return text